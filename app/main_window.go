package app

import (
	"database/sql"
	"fmt"
	"strings"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"

	"github.com/reinbowARA/PassLedger/db"
	"github.com/reinbowARA/PassLedger/models"
)

func ShowMainWindow(a fyne.App, database *sql.DB, key []byte, entries []models.PasswordEntry) {
	win := a.NewWindow("Password Book")
	win.Resize(fyne.NewSize(1000, 600))
	win.CenterOnScreen()

	// –¥–µ–ª–∞–µ–º pointer-like –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∑–∞–º—ã–∫–∞–Ω–∏—è—Ö:
	groupsSlice := getUniqueGroups(entries)
	var groupList *widget.List // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä—è–≤–∏—Ç—å –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	var list *widget.List
	detail := widget.NewRichText()
	detail.Wrapping = fyne.TextWrapWord
	currentGroup := "–í—Å–µ"
	searchText := ""

	// === Toolbar ===
	addBtn := widget.NewButtonWithIcon("–î–æ–±–∞–≤–∏—Ç—å", theme.ContentAddIcon(), func() {
		showAddForm(win, database, key, func() {
			refreshListFiltered(database, key, &entries, win, currentGroup, searchText)
		})
	})

	searchEntry := widget.NewEntry()
	searchEntry.SetPlaceHolder("–ü–æ–∏—Å–∫...")
	searchBox := container.New(
		layout.NewGridWrapLayout(fyne.NewSize(250, 36)), // —Ñ–∏–∫—Å–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É
		searchEntry,
	)

	searchBtn := widget.NewButtonWithIcon("", theme.SearchIcon(), func() {
		searchText = searchEntry.Text
		refreshListFiltered(database, key, &entries, win, currentGroup, searchText)
	})

	exitBtn := widget.NewButtonWithIcon("–í—ã–π—Ç–∏", theme.LogoutIcon(), func() {
		a.Quit()
	})
	toolbar := container.NewHBox(
		addBtn,
		layout.NewSpacer(),
		container.NewHBox(searchBox, searchBtn), // –Ω–µ —Å–∂–∏–º–∞–µ—Ç—Å—è
		layout.NewSpacer(),
		exitBtn,
	)

	// === –ì—Ä—É–ø–ø—ã ===

	groupList = widget.NewList(
		func() int { return len(groupsSlice) + 1 }, // +1 –¥–ª—è "+ –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"
		func() fyne.CanvasObject {
			// –ª–µ–≤–∞—è "–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è" —á–∞—Å—Ç—å ‚Äî Button, —Å–ø—Ä–∞–≤–∞ ‚Äî –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
			rowBtn := widget.NewButton("", nil)
			editBtn := widget.NewButtonWithIcon("", theme.DocumentCreateIcon(), nil)
			delBtn := widget.NewButtonWithIcon("", theme.DeleteIcon(), nil)
			return container.NewBorder(nil, nil, nil, container.NewHBox(editBtn, delBtn), rowBtn)
		},
		func(i widget.ListItemID, o fyne.CanvasObject) {
			// —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫: groupsSlice + –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–¥–∞ –∫–∞–∫ "+ –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"
			display := append(groupsSlice, "+ –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
			name := display[i]

			// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: Border( content=rowBtn, south=HBox(edit,del) )
			rowBtn := o.(*fyne.Container).Objects[0].(*widget.Button)
			btns := o.(*fyne.Container).Objects[1].(*fyne.Container)
			editBtn := btns.Objects[0].(*widget.Button)
			delBtn := btns.Objects[1].(*widget.Button)

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
			rowBtn.SetText(name)

			// –°—Ü–µ–Ω–∞—Ä–∏–∏:
			if name == "+ –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É" {
				// –°–¥–µ–ª–∞—Ç—å –≤–∏–¥–Ω–æ–π –∫–Ω–æ–ø–∫—É –∫–∞–∫ Add (–±–µ–∑ –∏–∫–æ–Ω–æ–∫ —Å–ø—Ä–∞–≤–∞)
				editBtn.Hide()
				delBtn.Hide()
				rowBtn.Importance = widget.HighImportance
				rowBtn.OnTapped = func() {
					// –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –≤ –ø–∞–º—è—Ç—å (–∏ –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º)
					showAddGroup(win, &groupsSlice, groupList) // –Ω–∏–∂–µ - –Ω–æ–≤–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞
				}
				return
			}

			// –î–ª—è –≥—Ä—É–ø–ø—ã "–í—Å–µ" –∑–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å
			if name == "–í—Å–µ" {
				editBtn.Hide()
				delBtn.Hide()
			} else {
				editBtn.Show()
				delBtn.Show()
				editBtn.OnTapped = func() {
					showRenameGroup(win, name, &entries, groupList, database, key)
				}
				delBtn.OnTapped = func() {
					dialog.ShowConfirm("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã", "–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É '"+name+"' –∏ –≤—Å–µ –µ—ë –∑–∞–ø–∏—Å–∏?", func(ok bool) {
						if ok {
							_ = db.DeleteGroup(database, name)
							// –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º groupsSlice –∏ —Å–ø–∏—Å–æ–∫
							groupsSlice = getUniqueGroupsFromDB(database, key) // –ª–∏–±–æ –∏–∑ entries
							groupList.Refresh()
							// –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏, –ø–æ–∫–∞–∑—ã–≤–∞—è "–í—Å–µ"
							refreshListFiltered(database, key, &entries, win, "–í—Å–µ", "")
						}
					}, win)
				}
			}
			list.UnselectAll()

			// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å–∞–º—É –≥—Ä—É–ø–ø—É ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞
			rowBtn.OnTapped = func() {
				currentGroup = name
				refreshListFiltered(database, key, &entries, win, currentGroup, searchText)
				list.Refresh()
				win.Content().Refresh()
				detail.ParseMarkdown("") // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å
			}

		},
	)

	// === –£—á—ë—Ç–∫–∏ ===
	list = widget.NewList(
		func() int { return len(entries) },
		func() fyne.CanvasObject {
			title := widget.NewLabel("")
			login := widget.NewLabel("")
			editBtn := widget.NewButtonWithIcon("", theme.DocumentCreateIcon(), nil)
			deleteBtn := widget.NewButtonWithIcon("", theme.DeleteIcon(), nil)
			return container.NewBorder(nil, nil, nil,
				container.NewHBox(editBtn, deleteBtn),
				container.NewVBox(title, login))
		},
		func(i widget.ListItemID, o fyne.CanvasObject) {
			if i < 0 || i >= len(entries) {
				return
			}
			entry := entries[i]
			c := o.(*fyne.Container)
			vbox := c.Objects[0].(*fyne.Container)
			title := vbox.Objects[0].(*widget.Label)
			login := vbox.Objects[1].(*widget.Label)
			title.SetText(entry.Title)
			login.SetText(fmt.Sprintf("üë§ %s", entry.Username))

			btns := c.Objects[1].(*fyne.Container)
			editBtn := btns.Objects[0].(*widget.Button)
			deleteBtn := btns.Objects[1].(*widget.Button)

			editBtn.OnTapped = func() {
				showAddForm(win, database, key, func() {
					refreshListFiltered(database, key, &entries, win, currentGroup, searchText)
				}, &entry)
			}
			deleteBtn.OnTapped = func() {
				dialog.ShowConfirm("–£–¥–∞–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?", func(ok bool) {
					if ok {
						db.DeleteEntry(database, entry.ID)
						refreshListFiltered(database, key, &entries, win, currentGroup, searchText)
					}
				}, win)
			}
		},
	)

	// === –ü–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª–µ–π ====
	showPassBtn := widget.NewButtonWithIcon("–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å", theme.VisibilityIcon(), nil)
	copyBtn := widget.NewButtonWithIcon("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", theme.ContentCopyIcon(), nil)

	list.OnSelected = func(id widget.ListItemID) {
		if id < 0 || id >= len(entries) {
			detail.ParseMarkdown("") // –æ—á–∏—â–∞–µ–º
			return
		}
	}
	list.OnSelected = func(id widget.ListItemID) {
		if id < 0 || id >= len(entries) {
			return
		}
		e := entries[id]
		var text string = fmt.Sprintf(`
							–ù–∞–∑–≤–∞–Ω–∏–µ: %s 
							–õ–æ–≥–∏–Ω: %s 
							–ü–∞—Ä–æ–ª—å: %s 
							URL: %s 
							–ó–∞–º–µ—Ç–∫–∏: %s `, e.Title, e.Username, maskPassword(e.Password), e.URL, e.Notes)
		detail.ParseMarkdown(text) //TODO –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ø–æ–∫–∞–∑ –ø–∞—Ä–æ–ª—è

		showPassBtn.OnTapped = func() {
			var text string = fmt.Sprintf(`
							–ù–∞–∑–≤–∞–Ω–∏–µ: %s 
							–õ–æ–≥–∏–Ω: %s 
							–ü–∞—Ä–æ–ª—å: %s 
							URL: %s 
							–ó–∞–º–µ—Ç–∫–∏: %s `, e.Title, e.Username, e.Password, e.URL, e.Notes)
			detail.ParseMarkdown(text)
		}

		copyBtn.OnTapped = func() {
			win.Clipboard().SetContent(e.Password)
		}
	}

	//TODO
	detailPanel := container.New(
		layout.NewVBoxLayout(),
		container.NewPadded(detail),
		layout.NewSpacer(),
		container.NewHBox(
			container.NewPadded(showPassBtn),
			container.NewPadded(copyBtn),
		),
	)

	// === –ú–∞–∫–µ—Ç ===
	vs := container.NewVSplit(list, detailPanel)
	//vs.SetOffset(0.2)
	mainContent := container.NewHSplit(groupList, vs)
	mainContent.SetOffset(0.2)

	content := container.NewBorder(toolbar, nil, nil, nil, mainContent)
	win.SetContent(content)
	win.Show()
}

// --- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ UI ---

func maskPassword(p string) string {
	if len(p) == 0 {
		return ""
	}
	return "********"
}

func refreshListFiltered(database *sql.DB, key []byte, entries *[]models.PasswordEntry, win fyne.Window, group, query string) {
	all, err := db.LoadAllEntries(database, key)
	if err != nil {
		ShowInfo(win, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏: "+err.Error())
		return
	}

	filtered := []models.PasswordEntry{}
	for _, e := range all {
		if group != "" && group != "–í—Å–µ" && e.Group != group {
			continue
		}
		if query != "" {
			q := strings.ToLower(query)
			if !strings.Contains(strings.ToLower(e.Title), q) &&
				!strings.Contains(strings.ToLower(e.Username), q) &&
				!strings.Contains(strings.ToLower(e.URL), q) {
				continue
			}
		}
		filtered = append(filtered, e)
	}
	*entries = filtered
	win.Content().Refresh()
}
