package main

import (
	"encoding/json"
	"fmt"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"

	"image/color"
	"strings"

	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª—è
type PasswordEntry struct {
	ID       int    `json:"id"`
	Title    string `json:"title"`
	Username string `json:"username"`
	Password string `json:"password"`
	URL      string `json:"url"`
	Notes    string `json:"notes"`
}

// FilterSettings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
type FilterSettings struct {
	Field string
	Query string
}

func main() {
	myApp := app.New()
	loginWindow := myApp.NewWindow("Password Book - –í—Ö–æ–¥")
	loginWindow.Resize(fyne.NewSize(350, 250))

	var masterPassword string
	passwordEntry := widget.NewPasswordEntry()
	passwordEntry.SetPlaceHolder("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å")

	loginButton := widget.NewButton("–í–æ–π—Ç–∏", func() {
		masterPassword = passwordEntry.Text
		if masterPassword == "" {
			showInfoPopup(loginWindow, "–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
			return
		}
		showMainWindow(myApp, masterPassword)
		loginWindow.Close()
	})

	// –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
	title := canvas.NewText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Password Book", color.NRGBA{R: 30, G: 100, B: 180, A: 255})
	title.TextStyle = fyne.TextStyle{Bold: true}
	title.Alignment = fyne.TextAlignCenter

	content := container.NewVBox(
		title,
		widget.NewLabel(""),
		widget.NewLabel("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:"),
		passwordEntry,
		loginButton,
	)

	loginWindow.SetContent(content)
	loginWindow.ShowAndRun()
}

func showMainWindow(a fyne.App, password string) {
	mainWindow := a.NewWindow("Password Book - –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ")
	mainWindow.Resize(fyne.NewSize(1000, 700))

	// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	entries := loadMockData()
	// –ü—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–∞
	filterSettings := FilterSettings{
		Field: "all",
		Query: "",
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
	list := widget.NewList(
		func() int { return len(entries) },
		func() fyne.CanvasObject {
			return container.NewBorder(
				nil, nil,
				widget.NewIcon(theme.DocumentIcon()),
				nil,
				container.NewVBox(
					widget.NewLabelWithStyle("", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
					widget.NewLabel(""),
				),
			)
		},
		func(i widget.ListItemID, o fyne.CanvasObject) {
			entry := entries[i]
			mainContainer := o.(*fyne.Container)
			vbox := mainContainer.Objects[0].(*fyne.Container)

			titleLabel := vbox.Objects[0].(*widget.Label)
			titleLabel.SetText(entry.Title)

			loginLabel := vbox.Objects[1].(*widget.Label)
			loginLabel.SetText(fmt.Sprintf("üë§ %s", entry.Username))
			loginLabel.Wrapping = fyne.TextWrapBreak
		},
	)
	// –í—ã–¥–µ–ª–µ–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø–∏—Å–∏
	detailsTitle := widget.NewLabel("")
	detailsTitle.TextStyle = fyne.TextStyle{Bold: true}
	detailsTitle.Alignment = fyne.TextAlignCenter

	detailsContent := widget.NewLabel("")
	detailsContent.Wrapping = fyne.TextWrapWord

	detailsCard := widget.NewCard("", "", container.NewVScroll(detailsContent))
	detailsCard.Hide()

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏
	list.OnSelected = func(id widget.ListItemID) {
		var entry PasswordEntry
		for _, creds := range entries {
			if creds.ID-1 == id{
				entry = creds
			}
		}
		//entry := entries[id]

		detailsTitle.SetText(entry.Title)
		detailsContent.SetText(fmt.Sprintf(
			"–°–∞–π—Ç: %s\nURL: %s\n–õ–æ–≥–∏–Ω: %s\n–ü–∞—Ä–æ–ª—å: %s\n\n–ó–∞–º–µ—Ç–∫–∏:\n%s",
			entry.Title,
			entry.URL,
			entry.Username,
			strings.Repeat("‚Ä¢", len(entry.Password)), // –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
			entry.Notes,
		))

		detailsCard.SetTitle("–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏")
		detailsCard.Show()
	}

	// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
	// –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
	searchInput := widget.NewEntry()
	searchInput.SetPlaceHolder("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...")
	searchInput.OnChanged = func(query string) {
		filterSettings.Query = query
		filtered := filterEntries(entries, filterSettings)
		updateList(list, filtered)
	}

	// –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
	fieldSelect := widget.NewSelect([]string{
		"–í—Å–µ –ø–æ–ª—è",
		"–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
		"–ü–æ –ª–æ–≥–∏–Ω—É",
		"–ü–æ URL",
		"–ü–æ –∑–∞–º–µ—Ç–∫–∞–º",
	}, func(selected string) {
		switch selected {
		case "–í—Å–µ –ø–æ–ª—è":
			filterSettings.Field = "all"
		case "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é":
			filterSettings.Field = "title"
		case "–ü–æ –ª–æ–≥–∏–Ω—É":
			filterSettings.Field = "username"
		case "–ü–æ URL":
			filterSettings.Field = "url"
		case "–ü–æ –∑–∞–º–µ—Ç–∫–∞–º":
			filterSettings.Field = "notes"
		}
		filtered := filterEntries(entries, filterSettings)
		updateList(list, filtered)
	})
	fieldSelect.SetSelected("–í—Å–µ –ø–æ–ª—è") // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	fieldSelect.PlaceHolder = "–§–∏–ª—å—Ç—Ä –ø–æ..."

	addButton := widget.NewButtonWithIcon("–î–æ–±–∞–≤–∏—Ç—å", theme.ContentAddIcon(), func() {
		showAddForm(mainWindow, &entries, list)
	})
	addButton.Importance = widget.HighImportance

	exitButton := widget.NewButtonWithIcon("–í—ã—Ö–æ–¥", theme.LogoutIcon(), func() {
		mainWindow.Close()
	})

	// –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
	toolbar := container.NewBorder(
		nil, nil,
		container.NewHBox(addButton, fieldSelect), // –°–ª–µ–≤–∞
		exitButton,  // –°–ø—Ä–∞–≤–∞
		searchInput, // –¶–µ–Ω—Ç—Ä (—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è)
	)
	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
	paddedToolbar := container.NewPadded(toolbar)
	paddedList := container.NewPadded(list)
	paddedDetails := container.NewPadded(detailsCard)

	// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
	split := container.NewHSplit(
		paddedList,
		container.NewBorder(
			container.NewPadded(detailsTitle),
			nil, nil, nil,
			paddedDetails,
		),
	)
	split.Offset = 0.35 // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞

	mainContent := container.NewBorder(
		paddedToolbar,
		nil,
		nil,
		nil,
		split,
	)
	// –°—Ç–∞—Ç—É—Å –±–∞—Ä
	statusBar := widget.NewLabel(fmt.Sprintf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: %d | –í–µ—Ä—Å–∏—è: 1.0", len(entries)))

	// –ò—Ç–æ–≥–æ–≤—ã–π –º–∞–∫–µ—Ç
	fullContent := container.NewBorder(
		nil,
		statusBar,
		nil,
		nil,
		mainContent,
	)

	mainWindow.SetContent(fullContent)
	mainWindow.Show()
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
func filterEntries(entries []PasswordEntry, settings FilterSettings) []PasswordEntry {
	if settings.Query == "" {
		return entries
	}

	query := strings.ToLower(settings.Query)
	filtered := []PasswordEntry{}

	for _, entry := range entries {
		found := false

		switch settings.Field {
		case "all":
			found = strings.Contains(strings.ToLower(entry.Title), query) ||
				strings.Contains(strings.ToLower(entry.Username), query) ||
				strings.Contains(strings.ToLower(entry.URL), query) ||
				strings.Contains(strings.ToLower(entry.Notes), query)

		case "title":
			found = strings.Contains(strings.ToLower(entry.Title), query)

		case "username":
			found = strings.Contains(strings.ToLower(entry.Username), query)

		case "url":
			found = strings.Contains(strings.ToLower(entry.URL), query)

		case "notes":
			found = strings.Contains(strings.ToLower(entry.Notes), query)
		}

		if found {
			filtered = append(filtered, entry)
		}
	}
	return filtered
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func loadMockData() []PasswordEntry {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞/–ë–î
	// –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON
	jsonData := `[
		{
			"id": 1,
			"title": "Google",
			"username": "user@gmail.com",
			"password": "MySecret123!",
			"url": "https://google.com",
			"notes": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç, –≤–∫–ª—é—á–µ–Ω–∞ 2FA"
		},
		{
			"id": 2,
			"title": "–Ø–Ω–¥–µ–∫—Å",
			"username": "yandex_user",
			"password": "Y@ndexP@ss",
			"url": "https://yandex.ru",
			"notes": "–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç"
		},
		{
			"id": 3,
			"title": "GitHub",
			"username": "dev_user",
			"password": "G1tHubs3cur3",
			"url": "https://github.com",
			"notes": "–î–ª—è opensource –ø—Ä–æ–µ–∫—Ç–æ–≤"
		},
		{
			"id": 4,
			"title": "–ë–∞–Ω–∫ –í–¢–ë",
			"username": "79101234567",
			"password": "Vtb2023Secure",
			"url": "https://vtb.ru",
			"notes": "–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç"
		},
		{
			"id": 5,
			"title": "Steam",
			"username": "gamer123",
			"password": "SteamSummerSale",
			"url": "https://steampowered.com",
			"notes": "–ê–∫–∫–∞—É–Ω—Ç —Å –∏–≥—Ä–∞–º–∏"
		}
	]`

	var entries []PasswordEntry
	if err := json.Unmarshal([]byte(jsonData), &entries); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", err)
		return []PasswordEntry{}
	}
	return entries
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
func updateList(list *widget.List, entries []PasswordEntry) {
	list.Length = func() int { return len(entries) }
	list.CreateItem = func() fyne.CanvasObject {
		return container.NewBorder(
			nil, nil,
			widget.NewIcon(theme.DocumentIcon()),
			nil,
			container.NewVBox(
				widget.NewLabelWithStyle("", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
				widget.NewLabel(""),
			),
		)
	}
	list.UpdateItem = func(id widget.ListItemID, item fyne.CanvasObject) {
		entry := entries[id]
		mainContainer := item.(*fyne.Container)
		vbox := mainContainer.Objects[0].(*fyne.Container)

		titleLabel := vbox.Objects[0].(*widget.Label)
		titleLabel.SetText(entry.Title)

		loginLabel := vbox.Objects[1].(*widget.Label)
		loginLabel.SetText(fmt.Sprintf("üë§ %s", entry.Username))
		loginLabel.Wrapping = fyne.TextWrapBreak
	}
	list.Refresh()
}

// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
func showAddForm(parent fyne.Window, entries *[]PasswordEntry, list *widget.List) {
	titleEntry := widget.NewEntry()
	titleEntry.SetPlaceHolder("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞")

	urlEntry := widget.NewEntry()
	urlEntry.SetPlaceHolder("URL —Å–∞–π—Ç–∞")

	userEntry := widget.NewEntry()
	userEntry.SetPlaceHolder("–õ–æ–≥–∏–Ω/Email")

	passEntry := widget.NewPasswordEntry()
	passEntry.SetPlaceHolder("–ü–∞—Ä–æ–ª—å")

	notesEntry := widget.NewMultiLineEntry()
	notesEntry.SetPlaceHolder("–ó–∞–º–µ—Ç–∫–∏")
	notesEntry.Wrapping = fyne.TextWrapWord

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "–ù–∞–∑–≤–∞–Ω–∏–µ", Widget: titleEntry, HintText: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"},
			{Text: "URL", Widget: urlEntry},
			{Text: "–õ–æ–≥–∏–Ω", Widget: userEntry},
			{Text: "–ü–∞—Ä–æ–ª—å", Widget: passEntry},
			{Text: "–ó–∞–º–µ—Ç–∫–∏", Widget: notesEntry},
		},
		//OnCancel: func() {},
		OnSubmit: func() {
			newEntry := PasswordEntry{
				ID:       len(*entries) + 1,
				Title:    titleEntry.Text,
				URL:      urlEntry.Text,
				Username: userEntry.Text,
				Password: passEntry.Text,
				Notes:    notesEntry.Text,
			}

			*entries = append(*entries, newEntry)
			list.Refresh()
			parent.Canvas().Content().Refresh()
		},
		SubmitText: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
		CancelText: "–û—Ç–º–µ–Ω–∞",
	}

	popup := widget.NewModalPopUp(
		container.NewVBox(
			widget.NewLabelWithStyle("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å", fyne.TextAlignCenter, fyne.TextStyle{Bold: true}),
			form,
		),
		parent.Canvas(),
	)

	form.OnCancel = popup.Hide
	popup.Show()
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
func showInfoPopup(parent fyne.Window, title, message string) {
	content := container.NewVBox(
		widget.NewLabelWithStyle(title, fyne.TextAlignCenter, fyne.TextStyle{Bold: true}),
		widget.NewLabel(message),
		widget.NewButton("OK", nil),
	)

	popup := widget.NewPopUp(content, parent.Canvas())
	content.Objects[2].(*widget.Button).OnTapped = popup.Hide
	popup.Show()
}
